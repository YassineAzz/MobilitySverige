"Norrköping" = c(58.5877, 16.1924),
"Jönköping " = c(57.7815, 14.1562),
"Lund" = c(55.7047, 13.1910),
"Umeå" = c(63.8258, 20.2630),
"Gävle" = c(60.6745, 17.1417),
"Borås" = c(57.7210, 12.9401),
"Eskilstuna" = c(59.3710, 16.5092),
"Södertälje" = c(59.1955, 17.6252),
"Karlstad" = c(59.3793, 13.5036),
"Täby" = c(59.4439, 18.0687),
"Växjö" = c(56.8777, 14.8091),
"Halmstad" = c(56.6745, 12.8568),
NULL)  # NULL if no city found
shiny::runApp('GIS map & data visualization/Assignment final')
# Votre clé API de Bing Maps
api_key <- "Auz6EByYkvmQLdxxp74p6c_5jXh76D4d0j3jSbYpY8FTwaCkGW1TXMPUh2KzCIzU"
# Le lieu à rechercher
query <- "Arlanda Airport"
# Construire l'URL pour la requête de géocodage
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations?",
"query=", URLencode(query),
"&key=", api_key)
# Faire la requête HTTP GET
response <- GET(url)
# Analyser la réponse JSON
geocode_data <- content(response, "parsed")
# Extraire les coordonnées et d'autres informations
if(length(geocode_data$resourceSets) > 0 && length(geocode_data$resourceSets[[1]]$resources) > 0) {
location_info <- geocode_data$resourceSets[[1]]$resources[[1]]
longitude <- location_info$point$coordinates[1]
latitude <- location_info$point$coordinates[2]
print(paste("Latitude:", latitude))
print(paste("Longitude:", longitude))
} else {
print("Aucun résultat trouvé")
}
# Votre clé API de Bing Maps
api_key <- "Auz6EByYkvmQLdxxp74p6c_5jXh76D4d0j3jSbYpY8FTwaCkGW1TXMPUh2KzCIzU"
# Le lieu à rechercher
query <- "Arlanda Airport"
# Construire l'URL pour la requête de géocodage
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations?",
"query=", URLencode(query),
"&key=", api_key,
"&include=queryParse,neighborhood,countryRegion")
# Faire la requête HTTP GET
response <- GET(url)
# Analyser la réponse JSON
geocode_data <- content(response, "parsed")
# Extraire des informations détaillées sur le lieu
if(length(geocode_data$resourceSets) > 0 && length(geocode_data$resourceSets[[1]]$resources) > 0) {
location_info <- geocode_data$resourceSets[[1]]$resources[[1]]
name <- location_info$name
address <- location_info$address$formattedAddress
countryRegion <- location_info$address$countryRegion
neighborhood <- ifelse(is.null(location_info$address$neighborhood), "Non spécifié", location_info$address$neighborhood)
print(paste("Nom du lieu:", name))
print(paste("Adresse formatée:", address))
print(paste("Pays/Région:", countryRegion))
print(paste("Quartier:", neighborhood))
} else {
print("Aucun résultat trouvé")
}
# Votre clé API
api_key <- "h9BAAfmXPWRqv3z"
# Définir l'aéroport (par exemple, Arlanda)
airport_code <- "ARN"  # Code IATA pour Arlanda
# Direction des vols, 'arrival' ou 'departure'
direction <- "arrival"  # ou "departure"
# Construire l'URL pour la requête
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Faire la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Vérifier et afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
# Votre clé API
api_key <- "h9BAAfmXPWRqv3z"
# Définir l'aéroport (par exemple, Arlanda)
airport_code <- "ARN"  # Code IATA pour Arlanda
# Direction des vols, 'arrival' ou 'departure'
direction <- "arrival"  # ou "departure"
# Construire l'URL pour la requête
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Faire la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Vérifier et afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
# Votre clé API
api_key <- "b1ed113cb26146cd8e45946bcbb982bc"
# Définir l'aéroport (par exemple, Arlanda)
airport_code <- "ARN"  # Code IATA pour Arlanda
# Direction des vols, 'arrival' ou 'departure'
direction <- "arrival"  # ou "departure"
# Construire l'URL pour la requête
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Faire la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Vérifier et afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
# Votre clé API
api_key <- "07e79c89fd7148bfa7a2f49867123a7b"
# Définir l'aéroport (par exemple, Arlanda)
airport_code <- "ARN"  # Code IATA pour Arlanda
# Direction des vols, 'arrival' ou 'departure'
direction <- "arrival"  # ou "departure"
# Construire l'URL pour la requête
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Faire la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Vérifier et afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
# Votre clé API
api_key <- "40778e4dcbdd49cba4f57c77ea019936"
# Définir l'aéroport (par exemple, Arlanda)
airport_code <- "ARN"  # Code IATA pour Arlanda
# Direction des vols, 'arrival' ou 'departure'
direction <- "arrival"  # ou "departure"
# Construire l'URL pour la requête
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Faire la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Vérifier et afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
# Votre clé API
api_key <- "e3ba9041110145cc965d93c60d72838c"
# Définir l'aéroport (par exemple, Arlanda)
airport_code <- "ARN"  # Code IATA pour Arlanda
# Direction des vols, 'arrival' ou 'departure'
direction <- "arrival"  # ou "departure"
# Construire l'URL pour la requête
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Faire la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Vérifier et afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
# Votre clé API
api_key <- "40778e4dcbdd49cba4f57c77ea019936"
# Définir l'aéroport (par exemple, Arlanda)
airport_code <- "ARN"  # Code IATA pour Arlanda
# Direction des vols, 'arrival' ou 'departure'
direction <- "arrival"  # ou "departure"
# Construire l'URL pour la requête
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Faire la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Vérifier et afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
# Votre clé API
api_key <- "40778e4dcbdd49cba4f57c77ea019936"
# Définir l'aéroport (par exemple, Arlanda)
airport_code <- "ARN"  # Code IATA pour Arlanda
# Direction des vols, 'arrival' ou 'departure'
direction <- "arrival"  # ou "departure"
# Construire l'URL pour la requête
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Faire la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Vérifier et afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
# Votre clé API - Remplacez cette valeur par votre véritable clé API
api_key <- "40778e4dcbdd49cba4f57c77ea019936"
# Code IATA de l'aéroport, par exemple, Arlanda (ARN)
airport_code <- "ARN"
# Direction des vols : 'A' pour les arrivées, 'D' pour les départs
direction <- "A"  # Utilisez "D" pour les départs si nécessaire
# Construire l'URL pour la requête de l'API
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Effectuer la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
# Votre clé API - Remplacez cette valeur par votre véritable clé API
api_key <- "e3ba9041110145cc965d93c60d72838c"
# Code IATA de l'aéroport, par exemple, Arlanda (ARN)
airport_code <- "ARN"
# Direction des vols : 'A' pour les arrivées, 'D' pour les départs
direction <- "A"  # Utilisez "D" pour les départs si nécessaire
# Construire l'URL pour la requête de l'API
url <- paste0("https://api.swedavia.se/airportinfo/v2/airlines",
"?airport=", airport_code,
"&direction=", direction)
# Préparer les en-têtes HTTP avec votre clé API
headers <- add_headers(Authorization = paste("Bearer", api_key))
# Effectuer la requête HTTP GET
response <- GET(url, headers)
# Analyser la réponse JSON
airlines_info <- content(response, "parsed")
# Afficher les résultats
if (length(airlines_info) > 0) {
print("Informations sur les compagnies aériennes récupérées avec succès:")
print(airlines_info)
} else {
print("Aucune information n'a été trouvée pour les critères donnés.")
}
shiny::runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
# Traiter la réponse
data <- content(response, "text")
# URL de l'API pour obtenir les arrêts de train
url <- "https://api.tagtider.net/station-departures"
# Si une clé API est nécessaire, incluez-la dans les headers
headers <- c(
'Authorization' = 'Bearer VOTRE_CLE_API'
)
# Paramètres de la requête
params <- list(
station_id = '1234'  # ID de la station pour laquelle vous voulez les départs
)
# Envoyer la requête
response <- GET(url, add_headers(.headers=headers), query=params)
# Vérifier le statut de la réponse
if (status_code(response) == 200) {
# Traiter la réponse
data <- content(response, "text")
print(data)
} else {
print(paste("Erreur dans la requête:", status_code(response)))
}
o
# Envoyer la requête
response <- GET(url, add_headers(.headers=headers), query=params)
print(response)
library(httr)
# URL de l'API pour obtenir les informations sur toutes les stations
url <- "http://api.tagtider.net/v1/stations.xml"
# Authentification de base avec nom d'utilisateur et mot de passe
auth <- authenticate("tagtimes", "codemocracy", type = "basic")
# Envoyer la requête
response <- GET(url, auth)
# Vérifier le statut de la réponse
if (status_code(response) == 200) {
# Extraire le contenu de la réponse (en format XML dans ce cas)
content <- content(response, "text", encoding = "UTF-8")
print(content)
} else {
print(paste("Erreur dans la requête:", status_code(response)))
}
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
# Écriture du dataframe dans un fichier CSV
write.csv(population_data, "population_data.csv", row.names = FALSE)
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
# Chargement des données de population
population_data <- read.csv("C:/Users/yassi/Documents/GIS map & data visualization/Assignment final/biggest_city_sweden_data.csv")
server <- function(input, output) {
# Observe changes in selected city to update the population display
observeEvent(input$city, {
if (!is.null(input$city)) {
print(input$city)
population <- population_data$Population[population_data$City == input$city]
print(population_data)
output$cityPopulation <- renderText({
paste("Population:", population)
})
}
})
observeEvent(input$go, {
shinyjs::disable('go')
shinyjs::delay(5000, shinyjs::enable('go'))
if (is.null(input$city) || is.null(input$poiType)) {
output$mapPlot <- renderTmap({
tmap_mode("view")
tm_shape() + tm_basemap(server = "OpenStreetMap")
})
return()
}
city_data <- getCityCoordinates(input$city)
if (is.null(city_data$coordinates)) {
print("Coordinates not found for the specified city")
output$mapPlot <- renderTmap({
tmap_mode("view")
tm_shape() + tm_basemap(server = "OpenStreetMap")
})
return()
}
url <- "https://gisdataapi.cetler.se/data101"
params  <- list(
dbName = 'OSM',
ApiKey = "v24yasazdu.sew5BUuppB!j5Orj8fNWFEPZQCjia2ryTeIY5OHsgqrCVCt1ThNh",
bufferType = "poly",
dataType = "poi",
centerPoint = paste(city_data$coordinates, collapse=","),
radius = "5000",
V = "1",
key = 'public_transport',
value = ifelse(input$poiType == "Subway", "station", ifelse(input$poiType == "Bus", "stop_position", "stop_area")),
poly=city_data$apiName
)
response <- GET(url, query = params)
if (status_code(response) == 200) {
json_data <- fromJSON(content(response, "text"))
if (!is.null(json_data) && length(json_data) > 0 && "longitude" %in% names(json_data) && "latitude" %in% names(json_data)) {
data <- st_as_sf(json_data, coords = c("longitude", "latitude"), crs = 4326, agr = "constant")
output$mapPlot <- renderTmap({
tmap_mode("view")
tm_shape(data) + tm_symbols(size = 0.1, col = "blue")
})
} else {
print("No valid data to display on map.")
output$mapPlot <- renderTmap({
tmap_mode("view")
tm_shape() + tm_basemap(server = "OpenStreetMap")
})
}
} else {
print(paste("Error in API response:", status_code(response)))
output$mapPlot <- renderTmap({
tmap_mode("view")
tm_shape() + tm_basemap(server = "OpenStreetMap")
})
}
})
}
runApp('GIS map & data visualization/Assignment final')
shiny::runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
runApp('GIS map & data visualization/Assignment final')
shiny::runApp('GIS map & data visualization/Assignment final')
